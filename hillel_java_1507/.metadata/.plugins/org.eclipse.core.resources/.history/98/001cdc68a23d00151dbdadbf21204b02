/*В этой версии AList1 объявляем массив в 10 элементов, 
 * рабочая область определяется: начало - начало масива 
 * 								 конец - индекс
 */
public class AList1 implements EList 
{

	private int[] arr = new int[10];
	private int index = -1;
	
	@Override
	public int size() 
	{
		return index+1;
	}

	@Override
	public void init(int[] ini)
	{
		if (ini == null|| ini.length == 0)
		{
			ini = new int[0];
			index = -1;	
		}
		else
		{
			index = ini.length-1;
			arr = new int[10];
			for (int i = 0; i < ini.length; i++) 
			{
				arr[i] = ini[i];
			}
		}
		
		
	}

	@Override
	public int[] toArray()
	{
		int[] temp = new int[index+1];
		for (int i = 0; i < index+1; i++)
		{
			temp[i] = arr[i];
		}
		return temp;
	}

	@Override
	public void clear()
	{
		init (null);	
	}

	@Override
	public int get(int pos) 
	{
		if(pos > index || pos < 0)
			throw new ListIsEmptyException();
		
		return arr[pos];
	}

	@Override
	public void set(int pos, int val)
	{
		if(pos > index || pos < 0)
			throw new ListIsEmptyException();
		else
		{
			this.arr[pos]=val;	
		}
	}

	@Override
	public void addStart(int val) 
	{
		/*index++;
		int[] tmp = new int[arr.length];
		for (int i = 1; i < size(); i++)
		{
			tmp[i] = arr[i - 1];
		}
		tmp[0] = val;
		arr = tmp;
		*/
		for (int i=index;i>=0;i--)
		{
			arr[i+1]=arr[i];
		}
		arr[0]=val;
		index++;
	}

	@Override
	public void addEnd(int val)
	{
		index++;
		arr[index]=val;
		
	}

	@Override
	public void addPos(int pos, int val)
	{
		if(pos > index || pos < 0)
			throw new ListIsEmptyException();
		else
		{
			for (int i=index;i>=pos;i--)
			{
				arr[i+1]=arr[i];
			}
		}
		arr[pos]=val;
		index++;

	}

	@Override
	public int delStart() 
	{
		if(size()==0)
			throw new ListIsEmptyException();
		int tmp=arr[0];
		for (int i=0;i<index;i++)
		{
			arr[i]=arr[i+1];
		}
		index--;
		return tmp;
	}

	@Override
	public int delEnd()
	{
		if(size()==0)
			throw new ListIsEmptyException();
		int tmp = arr[index];
		arr[index]=0;
		index--;
		return tmp;
	}

	@Override
	public int delPos(int pos) 
	{
		if(pos > index || pos < 0)
			throw new ListIsEmptyException();
		
			int tmp = arr[pos];
			
	
		
		return tmp;
	}

	@Override
	public int min() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public int max() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public int minInd() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public int maxInd() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public void sort() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void reverse() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void halfReverse() {
		// TODO Auto-generated method stub
		
	}

}
